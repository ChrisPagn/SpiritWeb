@page "/profile"
@using SpiritWeb.Shared.Models
@using SpiritWeb.Client.Services
@using MudBlazor
@inject AuthService AuthService
@inject DatabaseService DatabaseService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4">Profil Utilisateur</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (isLoading)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else if (userData == null)
            {
                <MudAlert Severity="Severity.Error">Impossible de charger les données utilisateur.</MudAlert>
            }
            else
            {
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="userData.DisplayName" Label="Nom d'affichage" Variant="Variant.Outlined" 
                                     FullWidth="true" ReadOnly="!isEditing" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Value="@AuthService.UserEmail" Label="Email" Variant="Variant.Outlined" 
                                     FullWidth="true" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="userData.CoinsCount" Label="Pièces" Variant="Variant.Outlined" 
                                     FullWidth="true" ReadOnly="!isEditing" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="userData.LevelReached" Label="Niveau atteint" Variant="Variant.Outlined" 
                                     FullWidth="true" ReadOnly="!isEditing" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="userData.LastLevelPlayed" Label="Dernier niveau joué" Variant="Variant.Outlined" 
                                    FullWidth="true" ReadOnly="!isEditing" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6">Inventaire</MudText>
                        <MudList T="string" Dense="true">
                            @if (userData.InventoryItemsName.Count == 0)
                            {
                                <MudListItem T="string">
                                    <MudText>Aucun objet dans l'inventaire</MudText>
                                </MudListItem>
                            }
                            else
                            {
                                @for (int i = 0; i < userData.InventoryItemsName.Count; i++)
                                {
                                    <MudListItem T="string">
                                        <MudText>@userData.InventoryItemsName[i] (ID: @userData.InventoryItems[i])</MudText>
                                    </MudListItem>
                                }
                            }
                        </MudList>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText Typo="Typo.body2">Dernière modification: @userData.LastModified.ToLocalTime().ToString("g")</MudText>
                    </MudItem>
                </MudGrid>
            }
        </MudCardContent>
        <MudCardActions>
            @if (!isLoading && userData != null)
            {
                @if (isEditing)
                {
                    <MudButton OnClick="CancelEdit" Variant="Variant.Outlined" Color="Color.Secondary">Annuler</MudButton>
                    <MudButton OnClick="SaveChanges" Variant="Variant.Filled" Color="Color.Primary" Class="ml-2">Enregistrer</MudButton>
                }
                else
                {
                    <MudButton OnClick="StartEdit" Variant="Variant.Outlined" Color="Color.Primary">Modifier</MudButton>
                }
            }
            <MudSpacer />
            <MudButton OnClick="SignOut" Variant="Variant.Filled" Color="Color.Error">Déconnexion</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private SaveData userData;
    private SaveData originalData;
    private bool isLoading = true;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.AuthInitialized; // Attendez que l'auth soit prête

        if (!AuthService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/authentication");
            return;
        }

        try
        {
            userData = await DatabaseService.LoadDataAsync(AuthService.UserId);
            originalData = CloneSaveData(userData);
            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des données: {ex.Message}");
            isLoading = false;
        }
    }

    private SaveData CloneSaveData(SaveData source)
    {
        return new SaveData
        {
            UserId = source.UserId,
            DisplayName = source.DisplayName,
            CoinsCount = source.CoinsCount,
            LevelReached = source.LevelReached,
            LastLevelPlayed = source.LastLevelPlayed,
            InventoryItems = new List<int>(source.InventoryItems),
            InventoryItemsName = new List<string>(source.InventoryItemsName),
            LastModified = source.LastModified
        };
    }

    private void StartEdit()
    {
        isEditing = true;
    }

    private void CancelEdit()
    {
        userData = CloneSaveData(originalData);
        isEditing = false;
    }

    private async Task SaveChanges()
    {
        try
        {
            userData.LastModified = DateTime.UtcNow;
            await DatabaseService.SaveDataAsync(userData);
            originalData = CloneSaveData(userData);
            isEditing = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la sauvegarde des modifications: {ex.Message}");
        }
    }

    private async Task SignOut()
    {
        await AuthService.SignOut();
        NavigationManager.NavigateTo("/authentication");
    }
}