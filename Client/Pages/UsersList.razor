@page "/users"
@using SpiritWeb.Shared.Models
@using SpiritWeb.Client.Services
@using MudBlazor
@inject DatabaseService DatabaseService
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4">Liste des Utilisateurs</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (isLoading)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else if (users == null || users.Count == 0)
            {
                <MudAlert Severity="Severity.Info">Aucun utilisateur trouvé.</MudAlert>
            }
            else
            {
                <MudTextField @bind-Value="searchString" Placeholder="Rechercher..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-4" />

                <MudTable Items="filteredUsers"
                          Hover="true"
                          Bordered="true"
                          Striped="true"
                          Dense="true"
                          Breakpoint="Breakpoint.Sm"
                          RowsPerPage="10"
                          ServerData="LoadServerData"
                          Filter="TableFilter"
                          Elevation="1">
                    <ToolBarContent>
                        <MudText Typo="Typo.subtitle1" Class="ml-2">Utilisateurs trouvés : @filteredUsers.Count</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Nom d'affichage</MudTh>
                        <MudTh>Niveau</MudTh>
                        <MudTh>Pièces</MudTh>
                        <MudTh>Dernier niveau joué</MudTh>
                        <MudTh>Dernier niveau débloqué</MudTh>
                        <MudTh>Objets</MudTh>
                        <MudTh>Dernière modification</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nom d'affichage">@context.DisplayName</MudTd>
                        <MudTd DataLabel="Niveau">@context.LevelReached</MudTd>
                        <MudTd DataLabel="Pièces">@context.CoinsCount</MudTd>
                        <MudTd DataLabel="Dernier niveau joué">@context.LastLevelPlayed</MudTd>
                        <MudTd DataLabel="Dernier niveau débloqué">@context.LevelReached</MudTd>
                        <MudTd DataLabel="Objets">@context.InventoryItemsName?.Count</MudTd>
                        <MudTd DataLabel="Dernière modification">@context.LastModified.ToLocalTime().ToString("f")</MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<SaveData> users = new();
    private string searchString = string.Empty;
    private bool isLoading = true;

    private List<SaveData> filteredUsers => string.IsNullOrWhiteSpace(searchString)
        ? users
        : users.Where(u =>
            (u.DisplayName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || u.LevelReached.ToString().Contains(searchString)
            || u.CoinsCount.ToString().Contains(searchString)
            || u.LastLevelPlayed.ToString().Contains(searchString)
        ).ToList();

    protected override async Task OnInitializedAsync()
    {
        await AuthService.AuthInitialized;

        if (!AuthService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/authentication");
            return;
        }

        try
        {
            users = await DatabaseService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des utilisateurs: {ex.Message}");
        }
        isLoading = false;
    }

    private bool TableFilter(SaveData user)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return (user.DisplayName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
               || user.LevelReached.ToString().Contains(searchString)
               || user.CoinsCount.ToString().Contains(searchString)
               || user.LastLevelPlayed.ToString().Contains(searchString);
    }

    private Task<TableData<SaveData>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var data = filteredUsers
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToList();

        return Task.FromResult(new TableData<SaveData>()
            {
                TotalItems = filteredUsers.Count,
                Items = data
            });
    }

}
