@page "/authentication"
@using SpiritWeb.Shared.Models
@using MudBlazor
@using SpiritWeb.Client.Services
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject DatabaseService DatabaseService

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-10">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">@(isRegistering ? "Créer un compte" : "Connexion")</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="email" Label="Email" Variant="Variant.Outlined" FullWidth="true" />
            <MudTextField @bind-Value="password" Label="Mot de passe" Variant="Variant.Outlined" FullWidth="true" InputType="InputType.Password" Class="mt-3" />

            @if (isRegistering)
            {
                <MudTextField @bind-Value="displayName" Label="Nom d'affichage" Variant="Variant.Outlined" FullWidth="true" Class="mt-3" />
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-3">@errorMessage</MudAlert>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="ToggleMode" Variant="Variant.Text" Color="Color.Secondary">
                @(isRegistering ? "Déjà un compte ? Se connecter" : "Pas encore de compte ? S'inscrire")
            </MudButton>
            <MudSpacer />
            <MudButton OnClick="HandleAuthentication" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Disabled="@isProcessing">
                @if (isProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Traitement...</MudText>
                }
                else
                {
                    @(isRegistering ? "S'inscrire" : "Se connecter")
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private string email = "";
    private string password = "";
    private string displayName = "";
    private string errorMessage = "";
    private bool isRegistering = false;
    private bool isProcessing = false;

    private void ToggleMode()
    {
        isRegistering = !isRegistering;
        errorMessage = "";
    }

    private async Task HandleAuthentication()
    {
        try
        {
            isProcessing = true;
            errorMessage = "";

            if (isRegistering)
            {
                var success = await AuthService.RegisterWithEmailAndPasswordAsync(email, password, displayName);
                if (success)
                {
                    // Créer les données initiales
                    await DatabaseService.CreateInitialDataAsync(AuthService.UserId, displayName);
                }
            }
            else
            {
                await AuthService.SignInWithEmailAndPasswordAsync(email, password);
            }

            // Rediriger vers la page d'accueil
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = TranslateFirebaseError(ex.Message);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private string TranslateFirebaseError(string message)
    {
        if (message.Contains("EMAIL_EXISTS"))
            return "Cet email est déjà utilisé.";
        if (message.Contains("INVALID_EMAIL"))
            return "Email invalide.";
        if (message.Contains("WEAK_PASSWORD"))
            return "Le mot de passe doit contenir au moins 6 caractères.";
        if (message.Contains("EMAIL_NOT_FOUND") || message.Contains("INVALID_PASSWORD"))
            return "Email ou mot de passe incorrect.";

        return $"Erreur: {message}";
    }
}