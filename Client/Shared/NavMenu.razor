@using SpiritWeb.Client.Services
@inject AuthService AuthService

@implements IDisposable

<MudNavMenu>
    <MudText Typo="Typo.h6" Class="px-4 py-2">SpiritWeb</MudText>
    <MudDivider Class="mb-2" />

    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Counter</MudNavLink>
    <MudNavLink Href="fetchdata" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Fetch data</MudNavLink>

    @if (!AuthService.IsAuthenticated)
    {
        <MudNavLink Href="authentication" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login">Authentification</MudNavLink>
    }
    else
    {
        <MudNavLink Href="profile" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Profil</MudNavLink>
        <MudNavLink Href="users" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People">Utilisateurs</MudNavLink>
    }
</MudNavMenu>

@code {
    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthStateChanged += OnAuthStateChanged;
        await AuthService.AuthInitialized; // Attendre que l'initialisation de l'authentification soit terminée
        StateHasChanged(); // Forcer un re-rendu initial
    }

    private void OnAuthStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= OnAuthStateChanged;
    }
}
